<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code of Albert</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://wxul.github.io/blog/"/>
  <updated>2019-11-28T03:27:36.792Z</updated>
  <id>https://wxul.github.io/blog/</id>
  
  <author>
    <name>Albert</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>php+apache站点迁移至docker实战</title>
    <link href="https://wxul.github.io/blog/2018/01/03/php-apache%E7%AB%99%E7%82%B9%E8%BF%81%E7%A7%BB%E8%87%B3docker%E5%AE%9E%E6%88%98/"/>
    <id>https://wxul.github.io/blog/2018/01/03/php-apache站点迁移至docker实战/</id>
    <published>2018-01-03T07:27:27.000Z</published>
    <updated>2019-11-28T03:27:36.792Z</updated>
    
    <content type="html"><![CDATA[<p>最近又换服务器了，把原来的 centos 6.9 换成了 ubuntu。centos 毕竟大而全，需要手动配置的地方太多，而 ubuntu 就比较适合个人使用，少折腾。但是原服务器上的个人站是用的 typecho，php+apache+mysql 环境，免不了又要迁移。于是就想到了 <a href="https://www.docker.com/" target="_blank" rel="noopener">docker</a></p><p>docker 的介绍就不多说了，其优点是轻量，而且可以免于频繁的搭建环境。首先安装 docker，可以见官网 <a href="https://docs.docker.com/engine/installation/#time-based-release-schedule" target="_blank" rel="noopener">安装 dock</a>。我安装的是 CE 版，docker 支持主流的 linux 和 macos 还有 windows。</p><p>安装的时候会发现，docker 官方的源超慢… 所以在安装完后第一件事就是换成国内的源，目前我用的是 <a href="http://www.daocloud.io/mirror" target="_blank" rel="noopener">Daocloud 加速</a>。</p><p>然后可以跑一下 hello-world <code>sudo docker run hello-world</code></p><p>如果没问题的话会有提示安装完成，接下来下一个 lamp 的镜像，可以运行 <code>sudo docker search lamp</code> 搜索镜像，我用了 star 数最高的 <code>linode/lamp</code> ，可以运行 <code>sudo docker pull linode/lamp</code> 下载此镜像。</p><blockquote><p><a href="http://blog.csdn.net/MasonQAQ/article/details/78048112?locationNum=5&amp;fps=1" target="_blank" rel="noopener">文章参考</a></p></blockquote><p>此镜像内已集成 mysql、apache2、php5.5 的环境，所以可以通过文件映射的方式将宿主机的文件挂载到 docker 镜像内运行。以网站目录<code>mywebsite</code>为例，以下是我写好的 sh 脚本，放在 mywebsite 根目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">pwd</span>=`<span class="built_in">pwd</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'enter a port:'</span></span><br><span class="line"><span class="built_in">read</span> port</span><br><span class="line">docker run -p <span class="variable">$port</span>:80 -v <span class="variable">$pwd</span>/mysql:/var/lib/mysql -v <span class="variable">$pwd</span>/site:/var/www/site -v <span class="variable">$pwd</span>/apache2:/etc/apache2/sites-enabled -v <span class="variable">$pwd</span>/apache2:/etc/apache2/sites-available -v <span class="variable">$pwd</span>/apache2.conf:/etc/apache2/apache2.conf -t -i linode/lamp /bin/bash</span><br></pre></td></tr></table></figure><p>mywebsite 目录结构为：</p><p>mywebsite<br><br>├─cmd.sh //shell 脚本，防止忘了命令…<br><br>├─site //网站目录<br><br>│ ├─log //日志目录<br><br>│ └─public_html //网站目录<br><br>│ └─index.html<br><br>├─mysql //mysql 数据库文件目录<br><br>├─apache2 //apache2 网站配置<br><br>├─apache2.conf //apache2 全局配置<br><br>└─php.ini //php 全局配置<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run : 运行一个镜像，此处为 linode/lamp</span><br><span class="line">-t -i linode/lamp /bin/bash : 使用 linode/lamp 并且打开 bash命令</span><br><span class="line">-p : 将宿主机的端口映射至容器的端口</span><br><span class="line">-v : 将宿主机的目录或文件映射至容器，可以多次使用</span><br></pre></td></tr></table></figure><p>上面的脚本里接收一个输入的端口映射至容器的 80 端口，并且将 mysql 文件和 apache 配置以及网站目录映射至容器。如果有需求修改其它配置比如 php 或者 mysql 也可以按照此方法映射至容器</p><p>启用: <code>sudo ./cmd.sh</code></p><p>启用成功后会进入容器里并打开 bash，首先要启动 apache 和 mysql 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service apache2 start</span><br><span class="line">service mysql start</span><br></pre></td></tr></table></figure><blockquote><p>我在启动 mysql 的时候报错，经排查发现是权限问题，由于 mysql 数据库文件是映射进来的，所以要修改权限。运行如下命令添加权限</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql:mysql /var/lib/mysql/</span><br><span class="line">chmod -R 755 /var/lib/mysql/</span><br></pre></td></tr></table></figure><blockquote><p>apache2 运行时可以报错 <code>[core:warn] [pid 14655] AH00111: Config variable ${APACHE_LOCK_DIR} is not defined</code> ，可以运行 <code>source /etc/apache2/envvars</code> 解决，详见 <a href="http://serverfault.com/questions/558283/apache2-config-variable-is-not-defined" target="_blank" rel="noopener">apache2</a></p></blockquote><p>接下来管理 mysql，修改默认密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment">#默认密码 : Admin2015</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改root可远程登录：可以不用</span></span><br><span class="line">mysql&gt;use mysql;</span><br><span class="line">mysql&gt;update user <span class="built_in">set</span> host = <span class="string">'%'</span> <span class="built_in">where</span> user = <span class="string">'root'</span> and host=<span class="string">'127.0.0.1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改密码：由于我是外部挂载的mysql文件，所以密码已经修改，这步没有运行</span></span><br><span class="line">mysql&gt;update user <span class="built_in">set</span> password=password(<span class="string">"your_password"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#刷新权限</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"><span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure><p>由于 apache2 默认没有安装 mysql 的 pdo，所以要安装一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install php5-mysql -y</span><br><span class="line">apt-get install php5-gd -y</span><br><span class="line"></span><br><span class="line"><span class="comment">#然后重启apache2:</span></span><br><span class="line">service apache2 restart</span><br></pre></td></tr></table></figure><p>然后按 <code>ctrl+p,ctrl+q</code> 退出容器，想要再进入可以在宿主机运行 <code>sudo docker ps</code> 获取容器的 id，然后运行 <code>sudo docker attach [ID]</code> 重新进入容器</p><p>如果 apache2 配置没错的话在宿主机访问 localhost:8888 就能看到容器里的页面了</p><p>关于 apache2 启动 rewrite，apache 默认并没有启用 rewrite，可以在 apache2.conf 里加上一句<code>LoadModule rewrite_module /usr/lib/apache2/modules/mod_rewrite.so</code> 启用 rewrite 模块，然后配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory /var/www/&gt;</span><br><span class="line">Options Indexes FollowSymLinks</span><br><span class="line">AllowOverride All</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><p>中把 AllowOverride 改为 All，之后就能在网站目录下放一个 .htaccess 文件来设置 rewrite 规则了。本例中为 typecho 启用的 rewrite 文件例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># BEGIN</span><br><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteBase /</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">RewriteRule ^(.*)$ /index.php/$1 [L]</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"># END</span><br></pre></td></tr></table></figure><p>还有 https~就懒得说了，基本是宿主机的 nginx 反向代理配置</p><p>最后，感觉用别人的镜像还是比较麻烦的，还是自己搭个镜像比较放心</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近又换服务器了，把原来的 centos 6.9 换成了 ubuntu。centos 毕竟大而全，需要手动配置的地方太多，而 ubuntu 就比较适合个人使用，少折腾。但是原服务器上的个人站是用的 typecho，php+apache+mysql 环境，免不了又要迁移。于是
      
    
    </summary>
    
    
      <category term="docker" scheme="https://wxul.github.io/blog/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>搭建Vue+karma+mocha+chai自动化测试环境</title>
    <link href="https://wxul.github.io/blog/2017/10/26/%E6%90%AD%E5%BB%BAVue+karma+mocha+chai%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/"/>
    <id>https://wxul.github.io/blog/2017/10/26/搭建Vue+karma+mocha+chai自动化测试环境/</id>
    <published>2017-10-26T09:00:38.000Z</published>
    <updated>2019-11-28T03:27:36.792Z</updated>
    
    <content type="html"><![CDATA[<p>由于准备在项目中应用单元测试，于是先查文档完成了一个简单的测试demo</p><blockquote><p>Demo: <a href="https://github.com/wxul/vue-karma" target="_blank" rel="noopener">here</a></p></blockquote><p>karma是一个启动器，可以测试在浏览器中运行的代码，此处是配合PhantomJs启动无头浏览器；mocha是一个测试框架，但是本身并不带断言库；所以引用了chai当断言库，chai提供了多种断言语法，此处选用了expect。3者配合可以实现自动化测试</p><p>目录结构:<br><img src="/blog/2017/10/26/搭建Vue+karma+mocha+chai自动化测试环境/karma-tree.png" alt="image"></p><h3 id="1-正常搭建vue-webpack开发环境"><a href="#1-正常搭建vue-webpack开发环境" class="headerlink" title="1. 正常搭建vue+webpack开发环境"></a>1. 正常搭建vue+webpack开发环境</h3><p>如目录结构所示，新建build文件夹用于存放开发配置，src目录用户存放项目源码</p><h3 id="2-安装karma"><a href="#2-安装karma" class="headerlink" title="2. 安装karma"></a>2. 安装karma</h3><blockquote><p>个人喜欢安装项目依赖时用yarn，其余时候用npm</p></blockquote><p>先全局安装: <code>npm install -g karma-cli</code></p><p>然后再安装到项目中: <code>yarn add karma --dev</code></p><p>再在项目的目录下运行karma初始化命令: <code>karma init</code></p><p>部分选项可以用键盘tab键切换，第一步是选择测试框架，此处可以选择 <code>jasmine,mocha,qunit,nodeunit,nunit</code>，我选择了 <code>mocha</code></p><p>第二步是是否使用 <code>Require.js</code>，此处选择不使用</p><p>第三步是选择测试的浏览器环境，可以选择 <code>Chrome,ChromeCanary,Firefox,Safari,PhantomJS,Opera,IE</code>，最方便的就是电脑上有什么浏览器就选什么浏览器，不过测试js和vue组件的话不需要界面，所以选择无界面浏览器工具 <code>PhantomJS</code>。选择 PhantomJS 的话需要本机安装 <a href="http://phantomjs.org/download.html" target="_blank" rel="noopener">PhantomJS 工具包</a></p><p>第四步是测试文件位置，可以用匹配符，此处填写 <code>test/unit/**/*.spec.js</code> 表示在 <code>test/unit</code>下所有以<code>.spec.js</code>结尾的文件都是测试文件 (由于目录下没有文件，所以会报警告找不到文件)</p><p>第五步是排除文件配置，写法同上</p><p>第六步是是否开启监听，初步搭建的时候可以关闭</p><p>完毕后可以在项目根目录下看到 <code>karma.conf.js</code> 文件，刚才填写或选择的配置项都在里面，随时可以修改</p><h3 id="3-安装mocha-chai"><a href="#3-安装mocha-chai" class="headerlink" title="3. 安装mocha+chai"></a>3. 安装mocha+chai</h3><p>正常安装 <code>yarn add mocha chai --dev</code></p><p>安装karma扩展 <code>yarn add karma-mocha karma-webpack --dev</code></p><p>安装PhantomJS启动 <code>yarn add karma-phantomjs-launcher --dev</code></p><h3 id="4-配置"><a href="#4-配置" class="headerlink" title="4. 配置"></a>4. 配置</h3><p>karma配合webpack使用，需要先写好webpack的配置文件，项目中存放在 <code>build/webpack.test.config.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">                loader: <span class="string">'babel-loader'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">                loader: <span class="string">'vue-loader'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>],</span><br><span class="line">        alias: &#123;</span><br><span class="line">            vue$: <span class="string">'vue/dist/vue.js'</span>,</span><br><span class="line">            <span class="string">'@src'</span>: path.resolve(__dirname, <span class="string">'../src'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>然后修改 <code>karma.conf.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./build/webpack.test.config'</span>);</span><br></pre></td></tr></table></figure></p><p>再在配置里添加配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">webpack: webpackConfig,</span><br><span class="line">webpackMiddleware: &#123;</span><br><span class="line">    noInfo: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改 <code>preprocessors</code> 配置用webpack处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">preprocessors: &#123;</span><br><span class="line">    <span class="string">'test/unit/**/*.spec.js'</span>: [<span class="string">'webpack'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5-编写测试"><a href="#5-编写测试" class="headerlink" title="5. 编写测试"></a>5. 编写测试</h3><p>在 <code>test/unit</code> 下新建测试文件 <code>app.spec.js</code>，vue的测试写法可以参考 <a href="https://cn.vuejs.org/v2/guide/unit-testing.html" target="_blank" rel="noopener">官方文档</a></p><p>先看被测试的文件 <code>App.vue</code> 的内容<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span>msg:&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            msg: <span class="string">'this is message.'</span></span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.msg = <span class="string">'mounted!'</span>;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        hello(w) &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">'hello'</span> + w;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后编写测试语句<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'@src/App.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> expect = <span class="built_in">require</span>(<span class="string">'chai'</span>).expect;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'app组件'</span>, () =&gt; &#123;</span><br><span class="line">    it(<span class="string">'检查mounted'</span>, () =&gt; &#123;</span><br><span class="line">        expect(App.mounted).to.a(<span class="string">'function'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">'检查data'</span>, () =&gt; &#123;</span><br><span class="line">        expect(App.data).to.a(<span class="string">'function'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">'检查hello方法'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(App).$mount();</span><br><span class="line">        expect(vm.hello).to.a(<span class="string">'function'</span>);</span><br><span class="line">        expect(vm.hello(<span class="string">' world!'</span>)).to.equal(<span class="string">'hello world!'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">'检查初始msg字段'</span>, () =&gt; &#123;</span><br><span class="line">        expect(App.data).to.a(<span class="string">'function'</span>);</span><br><span class="line">        expect(App.data().msg).to.equal(<span class="string">'this is message.'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">'检查msg字段'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(App).$mount();</span><br><span class="line">        expect(vm.msg).to.equal(<span class="string">'mounted!'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">'检查渲染实例'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> Ctor = Vue.extend(App);</span><br><span class="line">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Ctor().$mount();</span><br><span class="line">        expect(vm.$el.textContent).to.equal(<span class="string">'msg:this is message.'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">'检查渲染更新'</span>, done =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(App).$mount();</span><br><span class="line">        vm.msg = <span class="string">'message2'</span>;</span><br><span class="line">        <span class="comment">// 在状态改变后和断言 DOM 更新前等待一刻</span></span><br><span class="line">        Vue.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            expect(vm.$el.textContent).to.equal(<span class="string">'msg:message2'</span>);</span><br><span class="line">            done();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="6-开启测试"><a href="#6-开启测试" class="headerlink" title="6. 开启测试"></a>6. 开启测试</h3><p>在根目录下运行 <code>karma start</code> 开启测试服务器 (如果没有全局安装部分模块，可以使用 <code>./node_modules/.bin/karma start</code> 运行)</p><p>如果一切正常，再开一个命令窗口运行 <code>karma run</code> 就可以看到测试结果了</p><blockquote><p>浏览器输入<code>http://localhost:9876</code>可以看到测试服务器的界面</p></blockquote><h3 id="7-测试覆盖率报告"><a href="#7-测试覆盖率报告" class="headerlink" title="7. 测试覆盖率报告"></a>7. 测试覆盖率报告</h3><p>基于webpack2.0+，需要安装一些依赖 <code>yarn add karma-coverage karma-coverage-istanbul-reporter istanbul-instrumenter-loader --dev</code></p><p>同时修改一下配置，<code>webpack.test.config.js</code>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">    loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">        loaders: &#123;</span><br><span class="line">            js: <span class="string">'babel-loader'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        postLoaders: &#123;</span><br><span class="line">            js: <span class="string">'istanbul-instrumenter-loader?esModules=true'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>karma.conf.js</code> 中添加或修改配置:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">coverageIstanbulReporter: &#123;</span><br><span class="line">    reports: [<span class="string">'text-summary'</span>, <span class="string">'html'</span>],</span><br><span class="line">    fixWebpackSourcePaths: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">reporters: [<span class="string">'progress'</span>, <span class="string">'coverage-istanbul'</span>]</span><br></pre></td></tr></table></figure></p><p>然后按照步骤6运行，就会在根目录下生成 <code>coverage</code> 文件夹，打开 <code>index.html</code> 就能看到测试覆盖率报告了</p><blockquote><p>etc…</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于准备在项目中应用单元测试，于是先查文档完成了一个简单的测试demo&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Demo: &lt;a href=&quot;https://github.com/wxul/vue-karma&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://wxul.github.io/blog/tags/javascript/"/>
    
      <category term="vue" scheme="https://wxul.github.io/blog/tags/vue/"/>
    
      <category term="test" scheme="https://wxul.github.io/blog/tags/test/"/>
    
      <category term="webpack" scheme="https://wxul.github.io/blog/tags/webpack/"/>
    
      <category term="karma" scheme="https://wxul.github.io/blog/tags/karma/"/>
    
  </entry>
  
  <entry>
    <title>Cmder安装记录</title>
    <link href="https://wxul.github.io/blog/2017/07/26/Cmder%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
    <id>https://wxul.github.io/blog/2017/07/26/Cmder安装记录/</id>
    <published>2017-07-26T08:45:13.000Z</published>
    <updated>2019-11-28T03:27:36.790Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="http://cmder.net/" target="_blank">Cmder下载</a></p><p>建议下载full版本</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>解压后把目录加入到PATH即可,使用管理员权限打开cmd运行<code>cmder /register all</code>可以将cmder添加到右键菜单</p><h3 id="其它坑"><a href="#其它坑" class="headerlink" title="其它坑"></a>其它坑</h3><ul><li><p>如果不喜欢默认的提示符<code>λ</code>,可以找到<code>{安装目录}/vendor/clink.lua</code>并编辑.修改<code>local cmder_prompt = &quot;\x1b[1;32;40m{cwd} {git}{hg} \n\x1b[1;30;40m{lamb} \x1b[0m&quot;</code>中的<code>{lamb}</code>为<code>$</code>,再修改<code>clink.prompt.value = string.gsub(cmder_prompt, &quot;{lamb}&quot;, lambda)</code>中的<code>{lamb}</code>为<code>$$</code>  </p><blockquote><p>不同版本处理方式不同</p></blockquote></li><li><p>alias别名可能会失效,打开cmd然后右击左上角小图标选属性,勾选<code>使用旧版本控制台</code>,自定义alias配置文件在<code>{安装目录}/config/user-aliases.cmd</code></p></li><li><p>文字重复网上说的很多,<code>win+alt+P</code>打开设置,选<code>Main</code>然后取消勾选右边的<code>Monospace</code></p></li><li><p>将所有cmd提示都设为yes,可以修改<code>{安装目录}/config/settings</code>中的<code>terminate_autoanswer</code>设为1</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://cmder.net/&quot; target=&quot;_blank&quot;&gt;Cmder下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;建议下载ful
      
    
    </summary>
    
    
      <category term="terminal" scheme="https://wxul.github.io/blog/tags/terminal/"/>
    
  </entry>
  
  <entry>
    <title>Talk is cheap,show me the cooooooode!</title>
    <link href="https://wxul.github.io/blog/2017/01/11/Talk-is-cheap-show-me-the-cooooooode/"/>
    <id>https://wxul.github.io/blog/2017/01/11/Talk-is-cheap-show-me-the-cooooooode/</id>
    <published>2017-01-11T13:47:46.000Z</published>
    <updated>2019-11-28T03:27:36.791Z</updated>
    
    <content type="html"><![CDATA[<p>近期的一些项目：</p><ol><li><p><a href="https://github.com/wxul/mytools-vue" target="_blank" rel="noopener">MyTools前端页面</a></p></li><li><p><a href="https://github.com/wxul/mytools-api" target="_blank" rel="noopener">相关API</a></p></li><li><p><a href="https://github.com/wxul/mytools-electron" target="_blank" rel="noopener">整合成的Electron项目</a></p></li></ol><p><a href="http://tools.amayading.com/" target="_blank" rel="noopener">mytools!</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近期的一些项目：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/wxul/mytools-vue&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MyTools前端页面&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a
      
    
    </summary>
    
    
      <category term="css" scheme="https://wxul.github.io/blog/tags/css/"/>
    
      <category term="javascript" scheme="https://wxul.github.io/blog/tags/javascript/"/>
    
      <category term="electron" scheme="https://wxul.github.io/blog/tags/electron/"/>
    
      <category term="node" scheme="https://wxul.github.io/blog/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Linux下建立git服务器并配置自动发布网站的实践</title>
    <link href="https://wxul.github.io/blog/2016/12/11/Linux%E4%B8%8B%E5%BB%BA%E7%AB%8Bgit%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E9%85%8D%E7%BD%AE%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E8%B7%B5/"/>
    <id>https://wxul.github.io/blog/2016/12/11/Linux下建立git服务器并配置自动发布网站的实践/</id>
    <published>2016-12-11T09:40:00.000Z</published>
    <updated>2019-11-28T03:27:36.791Z</updated>
    
    <content type="html"><![CDATA[<p>本人使用阿里云的CentOS,版本为 Linux release 7.2</p><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><h3 id="1-git"><a href="#1-git" class="headerlink" title="1. git"></a>1. git</h3><p>直接yum安装,没啥好说的</p><h3 id="2-nginx"><a href="#2-nginx" class="headerlink" title="2. nginx"></a>2. nginx</h3><p>需要配置一下,在 <code>/etc/yum.repos.d/</code> 目录下新建文件nginx.repo<br>输入内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p>之后就能使用yum安装nginx了</p><hr><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><h3 id="1-git-1"><a href="#1-git-1" class="headerlink" title="1. git"></a>1. git</h3><p>首先添加git用户和组 <code>$ user add git</code> ,再建立git文件夹比如/git<br>添加公钥,客户端执行 <code>$ ssh-keygen -t rsa -C “youremail@email.com”</code> 生成秘钥,找到生成的id_rsa.pub公钥文件比将内容复制到服务端的git公钥文件 <code>/home/git/.ssh/authorized_keys</code> 中<br>在/git中初始化一个git仓库 <code>$ git init --bare project.git</code><br>更改所有者 <code>$ chown -R git project.git</code><br>客户端可以使用 <code>$ git clone git@yourdomain:/git/project.git</code> 来建立本地仓库<br>如果有本地仓库,可以使用 <code>$ git remote add origin git@yourdomain:/git/project.git</code> 添加remote建立联系</p><h3 id="2-nginx-1"><a href="#2-nginx-1" class="headerlink" title="2. nginx"></a>2. nginx</h3><p>建立网站文件夹比如/www/project<br>假设nginx安装在/etc/nginx下,那么 nginx.conf 就是配置文件,配置文件中有一行 <code>include /etc/nginx/conf.d/*.conf;</code><br>表示会把 /etc/nginx/conf.d/ 目录下的任意以 .conf结尾的配置文件引入进来<br>那么进入 /etc/nginx/conf.d/ 下并建立文件 git.conf 输入简单配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        server_name yordomain.com;</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                root /www/project;</span><br><span class="line">                index index.html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-hook"><a href="#3-hook" class="headerlink" title="3. hook!"></a>3. hook!</h3><p>git提交到服务器的是版本控制文件,如果需要自动发布还需要源文件,这可以通过git的hook来实现<br>首先进入git仓库的hook <code>$ cd /git/project.git/hooks</code><br>创建 post-receive 文件,输入内容：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">GIT_WORK_TREE=/www/project git checkout -f</span><br></pre></td></tr></table></figure></p><p>保存,并且修改权限 <code>$ chmod +x post-receive</code>,同时确保/www/project针对git也有写权限<br>表示每次客户端push的时候就将源文件复制到相应目录下,通过域名就能直接访问了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本人使用阿里云的CentOS,版本为 Linux release 7.2&lt;/p&gt;
&lt;h2 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; title=&quot;1. 安装&quot;&gt;&lt;/a&gt;1. 安装&lt;/h2&gt;&lt;h3 id=&quot;1-git&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="linux" scheme="https://wxul.github.io/blog/tags/linux/"/>
    
      <category term="git" scheme="https://wxul.github.io/blog/tags/git/"/>
    
      <category term="nginx" scheme="https://wxul.github.io/blog/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>XMLHttpRequest Level 2 使用指南</title>
    <link href="https://wxul.github.io/blog/2016/10/03/XMLHttpRequest-Level-2-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://wxul.github.io/blog/2016/10/03/XMLHttpRequest-Level-2-使用指南/</id>
    <published>2016-10-02T16:30:33.000Z</published>
    <updated>2019-11-28T03:27:36.791Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.ruanyifeng.com/blo
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://wxul.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>移动端网站适应性方案</title>
    <link href="https://wxul.github.io/blog/2016/07/25/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BD%91%E7%AB%99%E9%80%82%E5%BA%94%E6%80%A7%E6%96%B9%E6%A1%88/"/>
    <id>https://wxul.github.io/blog/2016/07/25/移动端网站适应性方案/</id>
    <published>2016-07-25T08:20:00.000Z</published>
    <updated>2019-11-28T03:27:36.793Z</updated>
    
    <content type="html"><![CDATA[<p>网易的方案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Dpr = <span class="number">1</span>, uAgent = <span class="built_in">window</span>.navigator.userAgent;</span><br><span class="line"><span class="keyword">var</span> isIOS = uAgent.match(<span class="regexp">/iphone/i</span>);</span><br><span class="line"><span class="keyword">var</span> isYIXIN = uAgent.match(<span class="regexp">/yixin/i</span>);</span><br><span class="line"><span class="keyword">var</span> is2345 = uAgent.match(<span class="regexp">/Mb2345/i</span>);</span><br><span class="line"><span class="keyword">var</span> ishaosou = uAgent.match(<span class="regexp">/mso_app/i</span>);</span><br><span class="line"><span class="keyword">var</span> isSogou = uAgent.match(<span class="regexp">/sogoumobilebrowser/ig</span>);</span><br><span class="line"><span class="keyword">var</span> isLiebao = uAgent.match(<span class="regexp">/liebaofast/i</span>);</span><br><span class="line"><span class="keyword">var</span> isGnbr = uAgent.match(<span class="regexp">/GNBR/i</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resizeRoot</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'fixed'</span>).style.display = <span class="string">'block'</span>;</span><br><span class="line">    <span class="keyword">var</span> wWidth = (screen.width &gt; <span class="number">0</span>) ? (<span class="built_in">window</span>.innerWidth &gt;= screen.width || <span class="built_in">window</span>.innerWidth == <span class="number">0</span>) ? screen.width : <span class="built_in">window</span>.innerWidth : <span class="built_in">window</span>.innerWidth, wDpr, wFsize;</span><br><span class="line">    <span class="keyword">var</span> wHeight = (screen.height &gt; <span class="number">0</span>) ? (<span class="built_in">window</span>.innerHeight &gt;= screen.height || <span class="built_in">window</span>.innerHeight == <span class="number">0</span>) ? screen.height : <span class="built_in">window</span>.innerHeight : <span class="built_in">window</span>.innerHeight;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.devicePixelRatio) &#123;</span><br><span class="line">        wDpr = <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        wDpr = isIOS ? wWidth &gt; <span class="number">818</span> ? <span class="number">3</span> : wWidth &gt; <span class="number">480</span> ? <span class="number">2</span> : <span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isIOS) &#123;</span><br><span class="line">        wWidth = screen.width;</span><br><span class="line">        wHeight = screen.height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if(window.orientation==90||window.orientation==-90)&#123;</span></span><br><span class="line">    <span class="comment">//     wWidth = wHeight;</span></span><br><span class="line">    <span class="comment">// &#125;else if((window.orientation==180||window.orientation==0))&#123;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">if</span> (wWidth &gt; wHeight) &#123;</span><br><span class="line">        wWidth = wHeight;</span><br><span class="line">    &#125;</span><br><span class="line">    wFsize = wWidth &gt; <span class="number">1080</span> ? <span class="number">144</span> : wWidth / <span class="number">7.5</span>;</span><br><span class="line">    wFsize = wFsize &gt; <span class="number">32</span> ? wFsize : <span class="number">32</span>;</span><br><span class="line">    <span class="built_in">window</span>.screenWidth_ = wWidth;</span><br><span class="line">    <span class="keyword">if</span> (isYIXIN || is2345 || ishaosou || isSogou || isLiebao || isGnbr) &#123;<span class="comment">//YIXIN 和 2345 这里有个刚调用系统浏览器时候的bug，需要一点延迟来获取</span></span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            wWidth = (screen.width &gt; <span class="number">0</span>) ? (<span class="built_in">window</span>.innerWidth &gt;= screen.width || <span class="built_in">window</span>.innerWidth == <span class="number">0</span>) ? screen.width : <span class="built_in">window</span>.innerWidth : <span class="built_in">window</span>.innerWidth;</span><br><span class="line">            wHeight = (screen.height &gt; <span class="number">0</span>) ? (<span class="built_in">window</span>.innerHeight &gt;= screen.height || <span class="built_in">window</span>.innerHeight == <span class="number">0</span>) ? screen.height : <span class="built_in">window</span>.innerHeight : <span class="built_in">window</span>.innerHeight;</span><br><span class="line">            wFsize = wWidth &gt; <span class="number">1080</span> ? <span class="number">144</span> : wWidth / <span class="number">7.5</span>;</span><br><span class="line">            wFsize = wFsize &gt; <span class="number">32</span> ? wFsize : <span class="number">32</span>;</span><br><span class="line">            <span class="comment">// document.getElementsByTagName('html')[0].dataset.dpr = wDpr;</span></span><br><span class="line">            <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>].style.fontSize = wFsize + <span class="string">'px'</span>;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'fixed'</span>).style.display = <span class="string">'none'</span>;</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// document.getElementsByTagName('html')[0].dataset.dpr = wDpr;</span></span><br><span class="line">        <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>].style.fontSize = wFsize + <span class="string">'px'</span>;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'fixed'</span>).style.display = <span class="string">'none'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// alert('fz='+wFsize+';dpr='+window.devicePixelRatio+';UA='+uAgent+';width='+wWidth+';sw='+screen.width+';wiw='+window.innerWidth+';wsw='+window.screen.width+window.screen.availWidth);</span></span><br><span class="line">&#125;</span><br><span class="line">resizeRoot();</span><br></pre></td></tr></table></figure><p>给html设置 <code>font-size</code> 为100px,如果基于设计图750px宽度来说body的宽度就是7.5rem,对应的如上代码的 <code>wFsize = wWidth &gt; 1080 ? 144 : wWidth / 7.5</code> 也是7.5<br>那么页面的尺寸都可以设置为基于100px的rem值,比如28px的字体为.28rem,50px高div的值为.5rem</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网易的方案：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s
      
    
    </summary>
    
    
      <category term="css" scheme="https://wxul.github.io/blog/tags/css/"/>
    
      <category term="javascript" scheme="https://wxul.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>nodejs写爬虫</title>
    <link href="https://wxul.github.io/blog/2016/06/28/nodejs%E5%86%99%E7%88%AC%E8%99%AB/"/>
    <id>https://wxul.github.io/blog/2016/06/28/nodejs写爬虫/</id>
    <published>2016-06-28T09:31:26.000Z</published>
    <updated>2019-11-28T03:27:36.791Z</updated>
    
    <content type="html"><![CDATA[<p>可能用到的一些库<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> req = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="keyword">var</span> chee = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"><span class="keyword">var</span> sql = <span class="built_in">require</span>(<span class="string">'mssql'</span>);</span><br></pre></td></tr></table></figure></p><p>我用的mssql，先配置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sql_config = &#123;</span><br><span class="line">    user: <span class="string">'sa'</span>,</span><br><span class="line">    password: <span class="string">'xxx'</span>,</span><br><span class="line">    server: <span class="string">'localhost'</span>,</span><br><span class="line">    database: <span class="string">'d'</span>,</span><br><span class="line">    pool: &#123;</span><br><span class="line">        max: <span class="number">100</span>,</span><br><span class="line">        min: <span class="number">0</span>,</span><br><span class="line">        idleTimeoutMillis: <span class="number">30000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>判断是否已经有数据（根据主键id），有的话就更新，没有就添加数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertVal</span>(<span class="params">data, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> conn = <span class="keyword">new</span> sql.Connection(sql_config, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> request = conn.request();</span><br><span class="line">        request.input(<span class="string">'id'</span>, data.id);</span><br><span class="line">        request.query(<span class="string">'select count(1) as count from [xxx] where id=@id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, e1, e2</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(e1, e2);</span><br><span class="line">            request = conn.request();</span><br><span class="line">            <span class="keyword">if</span> (e1 &amp;amp;&amp;amp; e1[<span class="number">0</span>] &amp;amp;&amp;amp; e1[<span class="number">0</span>].count) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'update'</span>);</span><br><span class="line">                <span class="comment">//update</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'insert'</span>);</span><br><span class="line">                <span class="comment">//insert</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">'function'</span>) &#123;</span><br><span class="line">                callback();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>异步请求<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (current &gt; end) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'over'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">'xx'</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//current++;</span></span><br><span class="line">        <span class="keyword">get</span>();</span><br><span class="line">    &#125;, 10);</span><br><span class="line">    req(url, function (err, res, body) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">        <span class="keyword">if</span> (res.statusCode != <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.warn(<span class="string">'status:'</span> + res.statusCode + <span class="string">',response:'</span> + res);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//dom操作</span></span><br><span class="line">        <span class="keyword">var</span> dom = <span class="built_in">JSON</span>.parse(body);</span><br><span class="line">        <span class="keyword">if</span> (dom.status) &#123;</span><br><span class="line">            <span class="keyword">var</span> data = dom.data;</span><br><span class="line">            <span class="built_in">console</span>.log(data.mid);</span><br><span class="line">            data.level_info = data.level_info || &#123;&#125;;</span><br><span class="line">            insertVal(data, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">get</span>();</span><br></pre></td></tr></table></figure></p><p>效率有点慢啊平均每条数据40ms~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;可能用到的一些库&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://wxul.github.io/blog/tags/javascript/"/>
    
      <category term="node" scheme="https://wxul.github.io/blog/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>阿里云OSS中遇到的坑</title>
    <link href="https://wxul.github.io/blog/2016/06/22/%E9%98%BF%E9%87%8C%E4%BA%91OSS%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>https://wxul.github.io/blog/2016/06/22/阿里云OSS中遇到的坑/</id>
    <published>2016-06-22T08:18:00.000Z</published>
    <updated>2019-11-28T03:27:36.794Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目开发用了阿里云OSS存储与下载文件，遇到不少的坑。为了防止人老健忘，特意记录下开发过程。</p><p>先上介绍：<a href="https://www.aliyun.com/product/oss/" target="_blank" rel="noopener">阿里云OSS</a><br>OSS的申请就不细说了，总之要有关键的Access Key ID、Access Key Secret<br>此外访问OSS也需要buket，OSS访问域名记为host</p><p>本文章基于前端上传回调方案，参考链接：<a href="https://help.aliyun.com/document_detail/31927.html?spm=5176.doc32016.6.201.hFMYGU" target="_blank" rel="noopener">服务端签名直传并设置上传回调</a></p><ol><li>上传<br>上传首先得有文件</li></ol><p><code>&lt;input type=&#39;file&#39; id=&#39;fff&#39; /&gt;;</code></p><p>写个简单事件(假装有jquery~)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#fff'</span>).change(</span><br><span class="line">    <span class="keyword">var</span> file=<span class="keyword">this</span>.files[<span class="number">0</span>];</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>好了有文件了，但是OSS不是任何人都能上传的，需要获得授权。我这里是通过后台获取，然而官方并没有c#的文档…<br>于是我把php的demo用c#写了遍<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">string id = &apos;你的id&apos;;</span><br><span class="line">string key = &apos;你的key&apos;;</span><br><span class="line">string host = &apos;你的host&apos;;</span><br><span class="line">string callback = &apos;你的callback地址&apos;;</span><br><span class="line">int expire = 600;   //600秒</span><br><span class="line">string dir = &apos;自定义目录/&apos;;   </span><br><span class="line">long GB = 1024 * 1024 * 1024;</span><br><span class="line">long maxlength = 2 * GB; //最大2G</span><br><span class="line"></span><br><span class="line">ObjGetOssSignCallback rslt = new ObjGetOssSignCallback();</span><br><span class="line">//回调主体，这里可以传参给回调地址</span><br><span class="line">var callback_param = new</span><br><span class="line">&#123;</span><br><span class="line">        callbackUrl = callback,</span><br><span class="line">        callbackBody = &apos;filename=$&#123;object&#125;&amp;size=$&#123;size&#125;&amp;mimeType=$&#123;mimeType&#125;&amp;height=$&#123;imageInfo.height&#125;&amp;width=$&#123;imageInfo.width&#125;&apos;,</span><br><span class="line">            callbackBodyType = &apos;application/x-www-form-urlencoded&apos;</span><br><span class="line">&#125;;</span><br><span class="line">string callback_string = JsonConvert.SerializeObject(callback_param);</span><br><span class="line">string base64_callback_body = callback_string.ToBase64();</span><br><span class="line"></span><br><span class="line">//过期时间 </span><br><span class="line">DateTime now = DateTime.Now;</span><br><span class="line">DateTime end = now.AddSeconds(expire);</span><br><span class="line">string expiration = end.GMT_iso8601();</span><br><span class="line"></span><br><span class="line">//文件设置</span><br><span class="line">var conditions = new List&lt;dynamic&gt;</span><br><span class="line">&#123;</span><br><span class="line">        new List&lt;dynamic&gt;&#123;&apos;content-length-range&apos;,0,maxlength&#125;,  //文件大小范围</span><br><span class="line">        new List&lt;dynamic&gt;&#123;&apos;starts-with&apos;,&apos;$key&apos;,dir&#125;             //路径</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//计算policy和signature</span><br><span class="line">var arr = new</span><br><span class="line">&#123;</span><br><span class="line">        expiration = expiration,</span><br><span class="line">        conditions = conditions</span><br><span class="line">&#125;;</span><br><span class="line">string policy = JsonConvert.SerializeObject(arr);</span><br><span class="line">string base64_policy = policy.ToBase64();</span><br><span class="line">string string_to_sign = base64_policy;</span><br><span class="line">string signature = BaseTools.hash_hmac(string_to_sign, key, true);</span><br><span class="line"></span><br><span class="line">var result = new</span><br><span class="line">&#123;</span><br><span class="line">        accessid = id,</span><br><span class="line">        host = host,</span><br><span class="line">        policy = base64_policy,</span><br><span class="line">        signature = signature,</span><br><span class="line">        expire = end.TimeStamp(),</span><br><span class="line">        callback = base64_callback_body,</span><br><span class="line">        dir = dir</span><br><span class="line">&#125;;</span><br><span class="line">rslt.Sign = result;</span><br><span class="line">rslt.CallBackUrl = callback;</span><br><span class="line">return rslt;</span><br></pre></td></tr></table></figure></p><p>以下是上面使用过的一些工具方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// Base64</span><br><span class="line">public static string ToBase64(this string str)</span><br><span class="line">&#123;</span><br><span class="line">        byte[] b = Encoding.UTF8.GetBytes(str);</span><br><span class="line">        return Convert.ToBase64String(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 转成iso8601格式的日期</span><br><span class="line">public static string GMT_iso8601(this DateTime d)</span><br><span class="line">&#123;</span><br><span class="line">        return string.Format(&apos;&#123;0&#125;Z&apos;, d.ToString(&apos;s&apos;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// HASH，sha1算法</span><br><span class="line">public static string hash_hmac(string signatureString, string secretKey, bool raw_output = true)</span><br><span class="line">&#123;</span><br><span class="line">    var enc = Encoding.UTF8;</span><br><span class="line">    HMACSHA1 hmac = new HMACSHA1(enc.GetBytes(secretKey));</span><br><span class="line">    hmac.Initialize();</span><br><span class="line"></span><br><span class="line">    byte[] buffer = enc.GetBytes(signatureString);</span><br><span class="line">    if (raw_output)</span><br><span class="line">    &#123;</span><br><span class="line">        byte[] b = hmac.ComputeHash(buffer);</span><br><span class="line">        return Convert.ToBase64String(b);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        return BitConverter.ToString(hmac.ComputeHash(buffer)).Replace(&apos;-&apos;, &apos;&apos;).ToLower();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我用的mvc，返回的格式如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Sign"</span>: &#123;</span><br><span class="line">    <span class="attr">"accessid"</span>: <span class="string">"xxxxxxxxxxxxxxx"</span>,</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"http://file.xxxxxxx.com"</span>,</span><br><span class="line">    <span class="attr">"policy"</span>: <span class="string">"eyJleHBpcmF0aW9uIjoiMjAxNi0wNi1yMlQxNjo0MDozOaoiLCJjb25kaXRpb25zIjpbWyJjb250ZW50LWxlamd0aC1yYW5nZSIsMCwyMTQ3NDgzNjQ4XSxbInN0YXJ0cy13arRoIiwiJGtleSIsIm16UHJval9kaXIvIl1dfQ=="</span>,</span><br><span class="line">    <span class="attr">"signature"</span>: <span class="string">"u868e090GtFyHlCtCtw6b5xb5gU="</span>,</span><br><span class="line">    <span class="attr">"expire"</span>: <span class="number">1466584839</span>,</span><br><span class="line">    <span class="attr">"callback"</span>: <span class="string">"eyJjYWxsYmFja1VybCI6Imh0dHA6Ly9tYWxsLmlzdGFybGlmZS5jb20vQ29tbW9uL1VwbG9hZENhbGxiYWNrIiwiY2FsbGJhY2tCb2R5IjoiZmlsZW5hbWU9JHtvYmplY3R9JnNpemU9JHtzaXplfSZtaW1lVHlwZT0ke21pbWVUeXBlfSZoZWlnaHQ9JHtpbWFnZUluZm8uaGVpZ2h0fSZ3aWR0aD0ke2ltYWdlSW5mby53aWR0aH0mdWlkPSIsImNhbGxiYWNrQm9keVR5cGUiOiJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQifQ=="</span>,</span><br><span class="line">    <span class="attr">"dir"</span>: <span class="string">"自定义目录/"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"CallBackUrl"</span>: <span class="string">"http://xxxx.xxxxxxx.com/controller/uploadcallback"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>要上传文件到OSS，需要这几个值：accessid，policy，callback，signature<br>项目要求使用ajax上传文件，于是就用到了FormData对象(为什么又不使用jquery传formdata了呢因为我懒…)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="keyword">var</span> frm = <span class="keyword">new</span> FormData();</span><br><span class="line">frm.append(<span class="string">'key'</span>, url);    <span class="comment">//此为文件保存名，例 'xinjianwenjianjia/asdasd.jpg'，不是文件名</span></span><br><span class="line"><span class="comment">//frm.append('Content-Disposition', 'attachment');    //如需下载就要设置此表单域，而且要注意顺序不能放在下面！血淋淋的坑..</span></span><br><span class="line">frm.append(<span class="string">'policy'</span>, policy);</span><br><span class="line">frm.append(<span class="string">'OSSAccessKeyId'</span>, accessid);</span><br><span class="line">frm.append(<span class="string">'success_action_status'</span>, <span class="number">200</span>);    <span class="comment">//不要在意这种细节~</span></span><br><span class="line">frm.append(<span class="string">'callback'</span>, callback);</span><br><span class="line">frm.append(<span class="string">'signature'</span>, signature);</span><br><span class="line">frm.append(<span class="string">'file'</span>, file);    <span class="comment">//文件对象</span></span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">'POST'</span>, oss.host);</span><br><span class="line">xhr.send(frm);</span><br></pre></td></tr></table></figure></p><p>好了完成了~个鬼啊，我们要监控上传状态或者要写进度条事件，哪能这么快完结(xhr在创建之后就能添加事件了)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进度条事件</span></span><br><span class="line">xhr.upload.addEventListener(<span class="string">'progress'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//console.log(e);</span></span><br><span class="line">    <span class="keyword">if</span> (e.lengthComputable) &#123;</span><br><span class="line">        <span class="keyword">var</span> progress = <span class="built_in">Math</span>.round(e.loaded * <span class="number">100</span> / e.total);</span><br><span class="line">        <span class="built_in">console</span>.log(progress);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//完成事件</span></span><br><span class="line">xhr.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.target.responseText);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//error事件</span></span><br><span class="line">xhr.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    alert(<span class="string">'上传出错！'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//暂停上传后的事件</span></span><br><span class="line">xhr.addEventListener(<span class="string">'abort'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p><p>上传过程到此结束！<br>参考文档：<a href="https://help.aliyun.com/document_detail/31988.html?spm=5176.doc31979.6.263.T1TJji" target="_blank" rel="noopener">Post Object</a></p><ol><li>下载<br>下载分两种，公开的和私有的。如果在OSS管理控制台中设置了buket为公开的，那么用host和上面上传的key值拼成url就能直接访问 <code>Demo: http://file.asdasd.com/xinjianwenjianjia/asdasd.jpg</code></li></ol><p>然而我被坑这么久明显是因为需要访问私有的文件…<br>先放文档：<a href="https://help.aliyun.com/document_detail/31857.html?spm=5176.doc31855.6.167.MJcFyR" target="_blank" rel="noopener">下载参考</a><br>很容易看到要通过url访问私有资源需要加一些参数，文件的保存路径(也是上面的key)记为objectName，OSSAccessKeyId，Expires，Signature<br>objectName是访问文件的唯一标识。OSSAccessKeyId是开发者的Access Key ID，不用担心泄密，Access Key Secret才是最秘密的东西<br>Expires是过期时间，时间戳。Signature是加密后的签名<br>由此可见，重点是如何生成Signature签名，其余的字段都是已有或者很容易获得的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Signature = base64(hmac-sha1(AccessKeySecret,</span><br><span class="line">            VERB + &apos;\n” </span><br><span class="line">            + Content-MD5 + &apos;\n&apos; </span><br><span class="line">            + Content-Type + &apos;\n&apos; </span><br><span class="line">            + Date + &apos;\n&apos; </span><br><span class="line">            + CanonicalizedOSSHeaders</span><br><span class="line">            + CanonicalizedResource))</span><br></pre></td></tr></table></figure></p><p>这是官方的Signature生成方案，其中Content-MD5和Content-Type和CanonicalizedOSSHeaders和CanonicalizedResource不用填写，有的时候填了还会报错…(理解不能，求原因)<br>因为这是用AccessKeySecret加密，涉及到安全问题最好放在后台生成，以下是我从php里转写成c#的代码(既视感)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//必须传入objectName，生成Signature必须</span><br><span class="line">//objectName不能以&apos;/&apos;开头</span><br><span class="line">if (string.IsNullOrEmpty(objectName))</span><br><span class="line">    return null;</span><br><span class="line">var result = new ObjGetOssDownloadSign();</span><br><span class="line">string id = &apos;xxxxxxxx&apos;;</span><br><span class="line">string key = &apos;xxxxxxxxxxxxxxxx&apos;;</span><br><span class="line">string host = &apos;你的host&apos;;</span><br><span class="line">string bucket = &apos;/yourbuket/&apos;;</span><br><span class="line">int expire = 600;</span><br><span class="line"></span><br><span class="line">DateTime now = DateTime.Now;</span><br><span class="line">DateTime end = now.AddSeconds(expire);</span><br><span class="line"></span><br><span class="line">string txt = &apos;GET\n&apos; +      //method</span><br><span class="line">            &apos;\n&apos; +          //Content-MD5</span><br><span class="line">            &apos;\n&apos; +          //Content-Type text/html 没什么卵用</span><br><span class="line">            end.TimeStamp() + &apos;\n&apos; +    //注意啊这是时间戳！千万别用官方文档上的GMT时间啊！</span><br><span class="line">            bucket + objectName;        //bucket+ObjectName</span><br><span class="line">//加密</span><br><span class="line">string hash = BaseTools.hash_hmac(txt, key, true);</span><br><span class="line"></span><br><span class="line">//encode一下</span><br><span class="line">hash = System.Web.HttpUtility.UrlEncode(hash, System.Text.Encoding.UTF8);</span><br><span class="line"></span><br><span class="line">result.Sign = new</span><br><span class="line">&#123;</span><br><span class="line">    OSSAccessKeyId = id,</span><br><span class="line">    Expires = end.TimeStamp(),</span><br><span class="line">    Signature = hash</span><br><span class="line">&#125;;</span><br><span class="line">result.DownloadUrl = host + obj.ObjectName + &apos;?OSSAccessKeyId=&apos; + id + &apos;&amp;Expires=&apos; + end.TimeStamp() + &apos;&amp;Signature=&apos; + hash;</span><br><span class="line">return result;</span><br></pre></td></tr></table></figure></p><p>也扔在mvc里，返回的数据格式如下(注意传参数，objectName)：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Sign"</span>: &#123;</span><br><span class="line">    <span class="attr">"OSSAccessKeyId"</span>: <span class="string">"xxxxxxxxx"</span>,</span><br><span class="line">    <span class="attr">"Expires"</span>: <span class="number">1466587469</span>,</span><br><span class="line">    <span class="attr">"Signature"</span>: <span class="string">"Vz3AxkNVaWDh9HsDhrglbq6JiUI%3d"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"DownloadUrl"</span>: <span class="string">"http://file.xxxx.com/asd/sadsda.png?OSSAccessKeyId=MHkBVLh0E5gGQkka&amp;Expires=1466587469&amp;Signature=Vz3AxkNVaWDh9HsDhrglbq6JiUI%3d"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>哦对了，扔个转时间戳的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//转时间戳</span><br><span class="line">public static long TimeStamp(this DateTime d)</span><br><span class="line">&#123;</span><br><span class="line">    DateTime DateStart = new DateTime(1970, 1, 1, 8, 0, 0); //天朝时区UTC+8</span><br><span class="line">    return Convert.ToInt32((d - DateStart).TotalSeconds);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>理论上返回的DownloadUrl就是访问文件的路径啦~然而这个链接一旦过期就会失效需要重新申请，前端也可以用Expires判断是否过期提醒用户刷新<br>但是坑还没完结，因为图片类型(image/jpg,png,gif)和PDF类型(目前只用过这两种)在点击链接的时候是默认打开的，项目需要的是让用户点击下载文件，怎么办呢~<br>这需要上传的时候多传一个字段，上面也写过了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frm.append(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment;filename=asdasd.png'</span>);</span><br></pre></td></tr></table></figure></p><p>这样上传的图片用<code>&lt;img src=&#39;xxx&#39; alt=&#39;&#39; /&gt;</code>还是能正常显示，但是直接打开链接的话就变成下载了。filename后面的就是文件下载时的重命名<br>这个坑就坑在append这个字段的时候不能放在最下边，一开始放在下面试了半天死活不能下载后来灵机一动移上去居然就成功了…成功了…功了…了….<br>(不能理解阿里云的思路)<br>完 End</p><p>附一个自己封装的oss工具吧，别嫌我简陋…<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> OSSFile = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> FileModel = <span class="function"><span class="keyword">function</span> (<span class="params">objname, option</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!objname) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.objname = objname;</span><br><span class="line">        option = option || &#123;&#125;;</span><br><span class="line">        <span class="keyword">this</span>.ispublic = option.ispublic || <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.url = option.url || <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.expire = option.ex || <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.type = option.type || <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    FileModel.prototype.getLink = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _self = <span class="keyword">this</span>;</span><br><span class="line">        $.post(<span class="string">'http://xxx.com/api/web/GetOssDownloadSign'</span>, &#123;</span><br><span class="line">            ObjectName: _self.objname,</span><br><span class="line">            Type: _self.type,</span><br><span class="line">            IsPublic: _self.ispublic    <span class="comment">//项目有两个库，一个公开一个私有~</span></span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">            <span class="keyword">if</span> (data.Sign) &#123;</span><br><span class="line">                _self.expire = data.Sign.Expires;</span><br><span class="line">            &#125;</span><br><span class="line">            _self.url = data.DownloadUrl;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">'function'</span>) &#123;</span><br><span class="line">                callback(data.DownloadUrl, data.Sign ? data.Sign.Expires : <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取后缀名</span></span><br><span class="line">    <span class="keyword">var</span> get_suffix = <span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">        pos = filename.lastIndexOf(<span class="string">'.'</span>)</span><br><span class="line">        suffix = <span class="string">''</span></span><br><span class="line">        <span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">            suffix = filename.substring(pos)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//随机字符串</span></span><br><span class="line">    <span class="keyword">var</span> random_string = <span class="function"><span class="keyword">function</span> (<span class="params">len</span>) </span>&#123;</span><br><span class="line">        len = len || <span class="number">32</span>;</span><br><span class="line">        <span class="keyword">var</span> chars = <span class="string">'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678'</span>;</span><br><span class="line">        <span class="keyword">var</span> maxPos = chars.length;</span><br><span class="line">        <span class="keyword">var</span> pwd = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            pwd += chars.charAt(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * maxPos));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        createModel: <span class="function"><span class="keyword">function</span> (<span class="params">objname, option</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FileModel(objname, option);</span><br><span class="line">        &#125;,</span><br><span class="line">        upload: <span class="function"><span class="keyword">function</span> (<span class="params">file, option, callback, progress, error</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="literal">null</span>, url = <span class="literal">null</span>, option = option || &#123;&#125;;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> file !== <span class="string">'undefined'</span> &amp;&amp; file.type &amp;&amp; file.name &amp;&amp; file.size) &#123;</span><br><span class="line">                xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">                xhr.upload.addEventListener(<span class="string">'progress'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> progress === <span class="string">'function'</span>) &#123;</span><br><span class="line">                        progress(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="literal">false</span>);</span><br><span class="line">                xhr.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">'function'</span>) &#123;</span><br><span class="line">                        callback(e.target.responseText, url);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="literal">false</span>);</span><br><span class="line">                xhr.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(e);</span><br><span class="line">                    alert(<span class="string">'上传出错！'</span>)</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> error === <span class="string">'function'</span>) &#123;</span><br><span class="line">                        error(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="literal">false</span>);</span><br><span class="line">                xhr.addEventListener(<span class="string">'abort'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(e);</span><br><span class="line">                &#125;, <span class="literal">false</span>);</span><br><span class="line">                <span class="comment">//项目有两个库，一个公开一个私有~</span></span><br><span class="line">                $.post(<span class="string">'http://xxx.com/api/web/GetOssSignCallback'</span>, &#123; <span class="attr">IsPublic</span>: option.ispublic || <span class="number">0</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(data);</span><br><span class="line">                    <span class="keyword">var</span> oss = data.Sign;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> suffix = get_suffix(file.name);</span><br><span class="line">                    <span class="keyword">var</span> name = random_string(<span class="number">32</span>) + suffix;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> frm = <span class="keyword">new</span> FormData();</span><br><span class="line">                    url = oss.dir + name;</span><br><span class="line">                    frm.append(<span class="string">'key'</span>, url);</span><br><span class="line">                    frm.append(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment;filename='</span> + (option.downloadname ? option.downloadname + suffix : name));</span><br><span class="line">                    frm.append(<span class="string">'policy'</span>, oss.policy);</span><br><span class="line">                    frm.append(<span class="string">'OSSAccessKeyId'</span>, oss.accessid);</span><br><span class="line">                    frm.append(<span class="string">'success_action_status'</span>, <span class="number">200</span>);</span><br><span class="line">                    frm.append(<span class="string">'callback'</span>, oss.callback);</span><br><span class="line">                    frm.append(<span class="string">'signature'</span>, oss.signature);</span><br><span class="line">                    frm.append(<span class="string">'file'</span>, file);</span><br><span class="line"></span><br><span class="line">                    xhr.open(<span class="string">'POST'</span>, oss.host);</span><br><span class="line">                    xhr.send(frm);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> xhr;</span><br><span class="line">        &#125;,</span><br><span class="line">        get_suffix: <span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> get_suffix(filename);</span><br><span class="line">        &#125;,</span><br><span class="line">        random_string: <span class="function"><span class="keyword">function</span> (<span class="params">len</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> random_string(len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure></p><p>调用示例(好吧我承认一开始写的已经忘了)：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#fff'</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _ = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> file = _.files[<span class="number">0</span>];</span><br><span class="line">    xhr = OSSFile.upload(file, &#123; <span class="attr">ispublic</span>: <span class="number">0</span>, <span class="attr">downloadname</span>: <span class="string">'这是重命名'</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">txt, url</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(txt, url);</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.lengthComputable) &#123;</span><br><span class="line">            <span class="keyword">var</span> progress = <span class="built_in">Math</span>.round(e.loaded * <span class="number">100</span> / e.total);</span><br><span class="line">            <span class="built_in">console</span>.log(progress);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>上面是上传，下面是获取下载或者访问链接：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> model = OSSFile.createModel(<span class="string">'xinjianwenjianjia/FMS8yhfAky5sskFK.png'</span>, &#123; <span class="attr">ispublic</span>: <span class="number">0</span> &#125;);</span><br><span class="line">model.getLink(<span class="function"><span class="keyword">function</span> (<span class="params">u</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(u);</span><br><span class="line">    <span class="comment">//$('#nice&gt;img').attr('src', u);</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>完2.0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近项目开发用了阿里云OSS存储与下载文件，遇到不少的坑。为了防止人老健忘，特意记录下开发过程。&lt;/p&gt;
&lt;p&gt;先上介绍：&lt;a href=&quot;https://www.aliyun.com/product/oss/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://wxul.github.io/blog/tags/javascript/"/>
    
      <category term="c#" scheme="https://wxul.github.io/blog/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>rem参考表格</title>
    <link href="https://wxul.github.io/blog/2016/04/15/rem%E5%8F%82%E8%80%83%E8%A1%A8%E6%A0%BC/"/>
    <id>https://wxul.github.io/blog/2016/04/15/rem参考表格/</id>
    <published>2016-04-15T07:39:00.000Z</published>
    <updated>2019-11-28T03:27:36.792Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://albert.amayading.com/usr/uploads/2016/04/2145423596.png" alt="emTable.png" title="emTable.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://albert.amayading.com/usr/uploads/2016/04/2145423596.png&quot; alt=&quot;emTable.png&quot; title=&quot;emTable.png&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="css" scheme="https://wxul.github.io/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>移动端该如何定义字体</title>
    <link href="https://wxul.github.io/blog/2016/04/08/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%AF%A5%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/"/>
    <id>https://wxul.github.io/blog/2016/04/08/移动端该如何定义字体/</id>
    <published>2016-04-08T08:19:00.000Z</published>
    <updated>2019-11-28T03:27:36.793Z</updated>
    
    <content type="html"><![CDATA[<p>ios 系统</p><ul><li><p>默认中文字体是Heiti SC</p></li><li><p>默认英文字体是Helvetica</p></li><li><p>默认数字字体是HelveticaNeue</p></li></ul><p>android 系统</p><ul><li><p>默认中文字体是Droidsansfallback</p></li><li><p>默认英文和数字字体是Droid Sans</p></li></ul><p>winphone 系统</p><ul><li><p>默认中文字体是Dengxian(方正等线体)</p></li><li><p>默认英文和数字字体是Segoe</p></li></ul><p>英文字体和数字字体可使用 Helvetica ，三种系统都支持。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">font-family</span>:Helvetica;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 京东的font-family设置 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Helvetica Neue'</span>,HelveticaNeue,<span class="string">'Helvetica-Neue'</span>,Helvetica,<span class="string">'BBAlpha Sans'</span>,sans-serif;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 百度的font-family设置 */</span></span><br><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">Arial</span>, <span class="selector-tag">Helvetica</span>, <span class="selector-tag">sans-serif</span>;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ios 系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;默认中文字体是Heiti SC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;默认英文字体是Helvetica&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;默认数字字体是HelveticaNeue&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;android
      
    
    </summary>
    
    
      <category term="css" scheme="https://wxul.github.io/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CSS标准参考</title>
    <link href="https://wxul.github.io/blog/2016/04/07/CSS%E6%A0%87%E5%87%86%E5%8F%82%E8%80%83/"/>
    <id>https://wxul.github.io/blog/2016/04/07/CSS标准参考/</id>
    <published>2016-04-07T08:51:44.000Z</published>
    <updated>2019-11-28T03:27:36.790Z</updated>
    
    <content type="html"><![CDATA[<p>属性入门：<br><a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">w3school</a></p><p>mozilla的规范：<br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Reference" target="_blank" rel="noopener">mozilla.org</a><br>中文版：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference" target="_blank" rel="noopener">mozilla.org/zh-CN</a></p><p>w3c规范<br><a href="https://www.w3.org/TR/#tr_CSS" target="_blank" rel="noopener">w3.org</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;属性入门：&lt;br&gt;&lt;a href=&quot;http://www.w3school.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;w3school&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mozilla的规范：&lt;br&gt;&lt;a href=&quot;https://develop
      
    
    </summary>
    
    
      <category term="css" scheme="https://wxul.github.io/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>chrome开发者工具不完全指南</title>
    <link href="https://wxul.github.io/blog/2016/04/07/chrome%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://wxul.github.io/blog/2016/04/07/chrome开发者工具不完全指南/</id>
    <published>2016-04-07T08:44:00.000Z</published>
    <updated>2019-11-28T03:27:36.791Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/constantince/p/4565261.html" target="_blank" rel="noopener">Chrome开发者工具不完全指南（一、基础功能篇）</a><br><a href="http://www.cnblogs.com/constantince/p/4579121.html" target="_blank" rel="noopener">Chrome开发者工具不完全指南（二、进阶篇）</a><br><a href="http://www.cnblogs.com/constantince/p/4585983.html" target="_blank" rel="noopener">Chrome开发者工具不完全指南（三、性能篇）</a><br><a href="http://www.cnblogs.com/constantince/p/4607497.html" target="_blank" rel="noopener">Chrome开发者工具不完全指南（四、性能进阶篇）</a><br><a href="http://www.cnblogs.com/constantince/p/4624241.html" target="_blank" rel="noopener">Chrome开发者工具不完全指南（五、移动篇）</a><br><a href="http://www.cnblogs.com/constantince/p/4641796.html" target="_blank" rel="noopener">Chrome开发者工具不完全指南（六、插件篇）</a></p><p>其它：<br><a href="http://blog.jobbole.com/31178/" target="_blank" rel="noopener">用Chrome开发者工具做JavaScript性能分析</a><br><a href="http://toutiao.com/i6196430737636180481/" target="_blank" rel="noopener">前端杂谈 - 深入了解Chrome开发工具</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/constantince/p/4565261.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Chrome开发者工具不完全指南（一、基础功能篇）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;htt
      
    
    </summary>
    
    
      <category term="chrome" scheme="https://wxul.github.io/blog/tags/chrome/"/>
    
      <category term="devtools" scheme="https://wxul.github.io/blog/tags/devtools/"/>
    
  </entry>
  
</feed>
